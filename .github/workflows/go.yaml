name: Go workflow
on:
  workflow_call:
    inputs:
      go-version:
        description: 'The version of Go used when running this workflow'
        default: '1.19'
        required: false
        type: string
      database:
        description: 'The database driver that should be used when testing. Available options: "none", "mysql"'
        default: 'none'
        required: false
        type: string
  push:
    branches: [ $default-branch ]
  pull_request:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

services:
  mysql: &mysql
    image: mysql:5.7
    ports:
      - 3306
    env:
      MYSQL_USER: gazebo
      MYSQL_PASSWORD: 1234
      MYSQL_DATABASE: gazebo_db
      MYSQL_ROOT_PASSWORD: 1234
    options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3


jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: go fmt
        run: go fmt ./...
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
          cache: true

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest
  vet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: go vet
        run: go vet ./...
  test:
    needs: vet
    runs-on: ubuntu-latest
    services:
      <<: *mysql

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify MySQL connection
        if: ${{ inputs.database == 'mysql' }}
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done          


      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Test
        run: go test -v ./...
  race:
    needs: vet
    runs-on: ubuntu-latest
    services:
      <<: *mysql

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify MySQL connection
        if: ${{ inputs.database == 'mysql' }}
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Coverage
        run: go test -v -race ./...
  coverage:
    needs: vet
    runs-on: ubuntu-latest
    services:
      <<: *mysql

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify MySQL connection
        if: ${{ inputs.database == 'mysql' }}
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done          

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Coverage
        run: | 
          go test -v -covermode=atomic -coverprofile=coverage.tx ./...
          go tool cover -func=coverage.tx -o=coverage.out
